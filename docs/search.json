[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 overedge authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"/articles/get_location.html","id":"supported-location-types","dir":"Articles","previous_headings":"Get location","what":"Supported location types","title":"Get locations and location data","text":"“type” location data can access get_location() flexible. can provide: simple feature object url spatial data file compatible sf::read_sf() url ArcGIS MapServer FeatureServer file path can also provide name simple feature object either already loaded global environment available load installed package. Data packages include exported data available package loaded, data available system files loaded (may sometimes undocumented), data default cache folder path rappdirs::user_cache_dir(). want use package data cached different location, need provide file path (filename directory) order use get_location(). parameters passed get_location() get_location_data() following section vignette includes details general function works. Finally, can alternatively pass named list index serves look-table matching “type” sf object.","code":""},{"path":"/articles/get_location.html","id":"supported-parameters-to-accessing-a-location","dir":"Articles","previous_headings":"Get location","what":"Supported parameters to accessing a location","title":"Get locations and location data","text":"basic parameters accessing specific location : name (name_col matching column filter) id (id_col matching column filter) passed value name coerced character id coerced numeric , “id” column type location character format, need treat “name” instead. Alternatively can use location parameter supports either: valid street address (geocoded tidygeocoder::geo()) simple feature object bounding box Note: 2022-02-14, get_location() currently supports single address time expect update function supports multiple addresses). provide sf bbox object, object used spatial filter either reading data (using bbox parameter read_sf_path read_sf_url) returning data using sf::st_filter() function.","code":""},{"path":"/articles/get_location.html","id":"working-with-union-and-label-parameters","dir":"Articles","previous_headings":"Get location > Supported parameters to accessing a location","what":"Working with union and label parameters","title":"Get locations and location data","text":"Location types administrative boundaries can often grouped together larger areas. union parameter makes easy .","code":""},{"path":[]},{"path":"/articles/get_location.html","id":"building-custom-look-up-functions","dir":"Articles","previous_headings":"Get location > What is get_location() good for?","what":"Building custom look-up functions","title":"Get locations and location data","text":"examples showing can use get_location() create new custom look-functions. location data another package, can use package parameters passed get_location_data() access data even without loading package. approach works best package data uses consistent naming scheme columns data support. makes easy turn names parameters example using nycgeo package. location data sourced ArcGIS MapServer FeatureServer, can use locationname locationname_col parameters underlying get_esri_data() function. avoids need download full dataset every time. Location data can also loaded URL GeoJSON spatial data file.","code":"# NOTE: install nycgeo from GitHub not CRAN # remotes::install_github(\"mfherman/nycgeo\") get_nyc_borough <- function(name = NULL, id = NULL, type = \"simple\") {      data <- \"borough_sf\"   if (type == \"simple\") {     data <- paste(data, type, sep = \"_\")   }      package <- \"nycgeo\"    get_location(     type = data,     package = package,     name = name,     id = id,     name_col = \"borough_name\",     id_col = \"borough_id\"   ) }  get_nyc_borough(\"Manhattan\") #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> Simple feature collection with 1 feature and 6 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 971160 ymin: 188438.4 xmax: 1010065 ymax: 259550.8 #> Projected CRS: NAD83 / New York Long Island (ftUS) #> # A tibble: 1 × 7 #>   geoid state_fips county_fips county_name borough_name borough_id #>   <chr> <chr>      <chr>       <chr>       <chr>        <chr>      #> 1 36061 36         061         New York    Manhattan    1          #> # … with 1 more variable: geometry <MULTIPOLYGON [US_survey_foot]> # get_anc looks up the Advisory Neighborhoood  # Data from Open Data DC https://opendata.dc.gov/datasets/fcfbf29074e549d8aff9b9c708179291  get_anc <- function(name) {   url <- \"https://maps2.dcgis.dc.gov/dcgis/rest/services/DCGIS_DATA/Administrative_Other_Boundaries_WebMercator/MapServer/1\"    get_location(     type = url,     locationname = toupper(name),     locationname_col = \"name\"   ) }  get_anc(name = \"5B\") #> Layer Type: Feature Layer #> Geometry Type: esriGeometryPolygon #> Service Coordinate Reference System: 3857 #> Output Coordinate Reference System: 4326 #> Warning: No location is provided. Returning all types. #> Simple feature collection with 1 feature and 11 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -76.99753 ymin: 38.92135 xmax: -76.96666 ymax: 38.95024 #> Geodetic CRS:  WGS 84 #>   objectid anc_id                                                    web_url #> 1        9 ANC 5B http://anc.dc.gov/page/advisory-neighborhood-commission-5b #>   name shape_area shape_len                               globalid creator #> 1   5B          0         0 {6DBCF9C2-E269-41C6-AE4D-AC645FFC101D}      NA #>   created editor       edited                          geoms #> 1      NA  DCGIS 1.573036e+12 MULTIPOLYGON (((-76.98239 3..."},{"path":"/articles/get_location.html","id":"accessing-overlapping-geographies","dir":"Articles","previous_headings":"Get location > What is get_location() good for?","what":"Accessing overlapping geographies","title":"Get locations and location data","text":"Since location supports addresses sf objects, can pull individual locations without knowing name id area. example, can use address: can also combine multiple approaches create look-function returns overlapping geography named characteristic. example, following function takes name school returns Baltimore City neighborhoods overlap school’s attendance zone.","code":"# NOTE: mapbaltimore is not currently available on CRAN # remotes::install_github(\"elipousson/mapbaltimore\") lookup_tract <- function(address) {   get_location(     type = \"baltimore_tracts\",     package = \"mapbaltimore\",     location = address   ) }  lookup_tract(\"100 Holliday St, Baltimore, MD 21202\") #> Passing 1 address to the Nominatim single address geocoder #> Query completed in: 1 seconds #> Simple feature collection with 1 feature and 8 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 432552.6 ymin: 179852.2 xmax: 434068 ymax: 180839.8 #> Projected CRS: NAD83(HARN) / Maryland #>   tractce       geoid name         namelsad   aland awater    intptlat #> 1  040100 24510040100  401 Census Tract 401 1191002   1430 +39.2902267 #>       intptlon                       geometry #> 1 -076.6145019 POLYGON ((432552.6 180801.8... lookup_school_neighborhoods <- function(school_name) {   school <-     get_location(     type = \"bcps_es_zones_SY2021\",     package = \"bcpss\",     name = school_name,     name_col = \"program_name_short\"   )      school_neighborhoods <- get_location(     type = \"neighborhoods\",     package = \"mapbaltimore\",     location = school   )      return(school_neighborhoods) }  lookup_school_neighborhoods(\"Eutaw-Marshburn E\") #> Simple feature collection with 4 features and 5 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 430345 ymin: 180859.9 xmax: 432750.5 ymax: 182536.5 #> Projected CRS: NAD83(HARN) / Maryland #> # A tibble: 4 × 6 #>   name                type       acres osm_id wikidata                  geometry #> * <chr>               <chr>      [acr… <chr>  <chr>           <MULTIPOLYGON [m]> #> 1 Druid Heights       Residenti…  57.9 12792… NA       (((431569.6 181988, 4315… #> 2 Madison Park        Residenti… 102.  12792… NA       (((432337.1 181728.9, 43… #> 3 Sandtown-Winchester Residenti… 260.  12800… Q7416984 (((430729.9 182481.6, 43… #> 4 Upton               Residenti… 188.  12792… Q7899346 (((432361 181396.1, 4323…"},{"path":"/articles/get_location.html","id":"get-location-data","dir":"Articles","previous_headings":"Get location","what":"Get location data","title":"Get locations and location data","text":"noted previous section, get_location() largely built around get_location_data(). , get_location_data() also helpful function just . data parameter supports options type parameter described prior section, get_location_data() also supports named parameters path url. Note: vignette work progress additional details added soon.","code":""},{"path":[]},{"path":"/articles/ggsave_ext.html","id":"set-some-parameters","dir":"Articles","previous_headings":"Getting started","what":"Set some parameters","title":"Map layout and themes with ggplot2 utility functions","text":"","code":"params <-   list(     paper = \"letter\",     margin = \"narrow\",     fontfamily = \"Georgia\",     orientation = \"portrait\",     neighborhood = \"Highlandtown\",     dist = NULL,     diag_ratio = 1   )  params$asp_block <-     get_asp(paper = params$paper,             margin = params$margin,             orientation = params$orientation,             block_asp = TRUE)  get_neighborhood <- function(name = NULL, location = NULL) {   get_location(     type = \"neighborhoods\",     package = \"mapbaltimore\",     name = name,     location = location     ) }  # Use the get_neighborhood wrapper function to pull a neighborhood neighborhood <-   get_neighborhood(name = params$neighborhood)  nearby_neighborhoods <-   get_neighborhood(     location = neighborhood   )  neighborhood_bbox <-   st_bbox_adj(     x = neighborhood,     dist = params$dist,     diag_ratio = params$diag_ratio,     asp = params$asp_block   )"},{"path":[]},{"path":"/articles/ggsave_ext.html","id":"create-a-basemap","dir":"Articles","previous_headings":"","what":"Create a basemap","title":"Map layout and themes with ggplot2 utility functions","text":"","code":"basemap <-   ggplot() +   layer_location_data(     location = neighborhood_bbox,     data = \"streets\",     package = \"mapbaltimore\",     color = \"gray40\"   ) +   layer_location_data(     location = neighborhood_bbox,     data = \"neighborhoods\",     package = \"mapbaltimore\",     mapping = aes(fill = name),     color = NA,     alpha = 0.6   ) +   scale_fill_discrete() +   layer_location_data(     location = neighborhood_bbox,     data = \"neighborhoods\",     package = \"mapbaltimore\",     geom = \"label\",     mapping = aes(label = name),     fn = ~ dplyr::filter(.x,                          name %in% nearby_neighborhoods$name,                          type == \"Residential\"),     fill = \"white\",     color = \"black\"   ) +   guides(     fill = \"none\"   )  basemap"},{"path":"/articles/ggsave_ext.html","id":"add-a-neatline-and-margins","dir":"Articles","previous_headings":"Create a basemap","what":"Add a neatline and margins","title":"Map layout and themes with ggplot2 utility functions","text":"","code":"neighborhood_map <- basemap +   # Draw a neatline around the selected neighborhood   layer_neatline(     data = neighborhood,     diag_ratio = 0.5,     asp = params$asp_block,     size = 1.5,     color = \"gray60\",     expand = TRUE   ) +   theme_margin(     paper = params$paper,     margin = params$margin,     orientation = params$orientation,     fill = \"white\",     color = NA   )    neighborhood_map"},{"path":"/articles/ggsave_ext.html","id":"save-map-with-ggsave_ext","dir":"Articles","previous_headings":"Create a basemap","what":"Save map with ggsave_ext","title":"Map layout and themes with ggplot2 utility functions","text":"","code":"ggsave_ext(   plot = neighborhood_map,   name = \"Neighborhood map\",   label = params$neighborhood,   title = \"Map of {params$neighborhood} and surrounding area\",   author = \"Eli Pousson\",   paper = params$paper,   orientation = params$orientation,   device = \"pdf\",   path = tempdir(),   exif = TRUE,   bg = \"white\" ) #> 'perl' '/Library/Frameworks/R.framework/Versions/4.1/Resources/library/exifr/exiftool/exiftool.pl' -Author='Eli Pousson' -Title='Map of Highlandtown and surrounding area' -CreateDate='2022:02:16 23:07:38' -overwrite_original '/var/folders/z9/kd515wrs3x75_d8l637gx3cc0000gr/T//RtmpMwm3Kx/2022-02-16_highlandtown_neighborhood_map.pdf'"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eli Pousson. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pousson E (2022). overedge: Assorted Functions Easier Map Making. R package version 0.0.0.9000.","code":"@Manual{,   title = {overedge: Assorted Functions For Easier Map Making},   author = {Eli Pousson},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"overedge","dir":"","previous_headings":"","what":"Assorted Functions For Easier Map Making","title":"Assorted Functions For Easier Map Making","text":"goal overedge provide useful functions making maps R. collection miscellaneous functions primarily working ggplot2 sf.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Assorted Functions For Easier Map Making","text":"can install development version overedge like :","code":"remotes::install_github(\"elipousson/overedge\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Assorted Functions For Easier Map Making","text":"overedge currently provides just functions.","code":""},{"path":"/index.html","id":"make-icon-maps-with-sf-objects-and-ggplot2","dir":"","previous_headings":"Examples","what":"Make icon maps with sf objects and ggplot2","title":"Assorted Functions For Easier Map Making","text":"geom_sf_icon wraps ggsvg::geom_point_svg() provide convenient way make icon maps. can create maps using single named icon matches one icons map_icons.  can also use icon column provided sf object.  Check map_icons see supported icon names.","code":"library(overedge) library(ggplot2) library(sf) #> Warning: package 'sf' was built under R version 4.1.1 #> Linking to GEOS 3.9.1, GDAL 3.2.3, PROJ 7.2.1; sf_use_s2() is TRUE  nc <- st_read(system.file(\"shape/nc.shp\", package=\"sf\")) #> Reading layer `nc' from data source  #>   `/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/sf/shape/nc.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 nc <- st_transform(nc, 2264) theme_set(theme_void())  nc_map <-   ggplot() +   geom_sf(data = nc)  nc_map +   geom_sf_icon(data = nc, icon = \"point-start\", size = 8) #> Warning: Converting data from MULTIPOLYGON to POINT with `sf::st_centroid()`. nc$icon <- rep(c(\"1\", \"2\", \"3\", \"4\"), nrow(nc)/4)  nc_map +   geom_sf_icon(data = nc, size = 5) #> Warning: Converting data from MULTIPOLYGON to POINT with `sf::st_centroid()`. head(map_icons) #>                name #> 1         aerialway #> 2          airfield #> 3           airport #> 4      alcohol-shop #> 5 american-football #> 6    amusement-park #>                                                                              url #> 1         https://raw.githubusercontent.com/mapbox/maki/main/icons/aerialway.svg #> 2          https://raw.githubusercontent.com/mapbox/maki/main/icons/airfield.svg #> 3           https://raw.githubusercontent.com/mapbox/maki/main/icons/airport.svg #> 4      https://raw.githubusercontent.com/mapbox/maki/main/icons/alcohol-shop.svg #> 5 https://raw.githubusercontent.com/mapbox/maki/main/icons/american-football.svg #> 6    https://raw.githubusercontent.com/mapbox/maki/main/icons/amusement-park.svg #>   size style        repo #> 1   15       mapbox/maki #> 2   15       mapbox/maki #> 3   15       mapbox/maki #> 4   15       mapbox/maki #> 5   15       mapbox/maki #> 6   15       mapbox/maki"},{"path":"/index.html","id":"scale-and-rotate-sf-objects","dir":"","previous_headings":"Examples","what":"Scale and rotate sf objects","title":"Assorted Functions For Easier Map Making","text":"st_scale_rotate() convenience function apply affine transformations sf objects.","code":"nc_rotated <- st_scale_rotate(nc, scale = 0.5, rotate = 15)  nc_map +   geom_sf(data = nc_rotated, fill = NA, color = \"red\")"},{"path":"/index.html","id":"create-inscribed-squares-in-sf-objects","dir":"","previous_headings":"Examples","what":"Create inscribed squares in sf objects","title":"Assorted Functions For Easier Map Making","text":"","code":"nc_squares <- st_inscribed_square(nc)  nc_map +   geom_sf(data = nc_squares, fill = NA, color = \"red\")"},{"path":"/index.html","id":"add-a-neatline-to-a-map","dir":"","previous_headings":"Examples","what":"Add a neatline to a map","title":"Assorted Functions For Easier Map Making","text":"layer_neatline() hides major grid lines axis label default. function useful draw neatline around map set aspect ratio. layer_neatline() can also used focus specific area map option apply buffer distance ratio diagonal distance input data. label_axes hide_grid paramters override set ggplot theme.","code":"nc_map +   layer_neatline(data = nc,                  asp = \"6:4\",                  color = \"gray60\", size = 2, linetype = \"dashed\") theme_set(theme_minimal())  nc_map +   layer_neatline(data = nc[1,],                  diag_ratio = 0.5, asp = 1,                  color = \"black\",                  label_axes = \"--EN\", hide_grid = FALSE)"},{"path":"/reference/df_to_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data frame with coordinates to simple feature object — df_to_sf","title":"Convert data frame with coordinates to simple feature object — df_to_sf","text":"Convert data frame coordinates simple feature object","code":""},{"path":"/reference/df_to_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data frame with coordinates to simple feature object — df_to_sf","text":"","code":"df_to_sf(   x,   coords = c(\"LONGITUD\", \"LATITUDE\"),   into = NULL,   sep = \",\",   lonlat = TRUE,   crs = 4326 )"},{"path":"/reference/df_to_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data frame with coordinates to simple feature object — df_to_sf","text":"x data frame lat/lon coordinates 1 combined 2 separated columns coords character string names longitude latitude column columns, Default: c('LONGITUD', 'LATITUDE') coords single column name longitude latitude, used names new columns coords separated . Passed tidyr::separate(). sep coords single column name longitude latitude, sep used separator coordinate values. Passed tidyr::separate(). lonlat coords ordered latitude, longitude order latitude, longitude order, set FALSE. Default TRUE. crs coordinate reference system returned sf object, Default: 4326","code":""},{"path":"/reference/df_to_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data frame with coordinates to simple feature object — df_to_sf","text":"sf object","code":""},{"path":"/reference/df_to_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert data frame with coordinates to simple feature object — df_to_sf","text":"DETAILS","code":""},{"path":[]},{"path":"/reference/df_to_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data frame with coordinates to simple feature object — df_to_sf","text":"","code":"if (FALSE) { if (interactive()) {   nc <- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"))   nc_df <- ggspatial::df_spatial(nc)    df_to_sf(nc_df, coords = c(\"x\", \"y\"))    nc_df$xy <- paste(nc_df$x, nc_df$y, sep = \",\")    df_to_sf(nc_df, coords = \"xy\", into = c(\"lon\", \"lat\")) } }"},{"path":"/reference/geom_sf_icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw SVG icons for a simple feature object — geom_sf_icon","title":"Draw SVG icons for a simple feature object — geom_sf_icon","text":"Use geom_point_svg() function plot icons using centroids input simple feature object set icon location.","code":""},{"path":"/reference/geom_sf_icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw SVG icons for a simple feature object — geom_sf_icon","text":"","code":"geom_sf_icon(   data = NULL,   iconname_col = \"icon\",   icon = NULL,   px = NULL,   source = NULL,   svg = NULL,   color = \"black\",   ... )"},{"path":"/reference/geom_sf_icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw SVG icons for a simple feature object — geom_sf_icon","text":"data sf object. geometry type data POINT, object used . , object converted POINT using st_centroid(). iconname_col column name input data use icon name. name matches multiple icons, first match map_icons used. may provide px source value select different match needed , case, icons must use px source value. Note icon column mapped aes(). icon Icon name. Default NULL. icon provided, iconname_col used. px Icon size pixels. See map_icons$px supported options. Optional may necessary differentiate icons duplicate names. source Icon source. See map_icons$repo supported options. Optional may required differentiate icons duplicate names. svg Optional. Custom file path URL SVG pass svg parameter ggsvg::geom_point_svg().  icon provided, svg used. color SVG color passed ggsvg::geom_point_svg(). default color set \"black\". ... Additional parameters ggsvg::geom_point_svg()","code":""},{"path":[]},{"path":"/reference/geom_sf_icon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw SVG icons for a simple feature object — geom_sf_icon","text":"","code":"if (FALSE) { if (interactive()) {   library(sf)   library(ggplot2)   library(overedge)    nc <- st_read(system.file(\"shape/nc.shp\", package = \"sf\"))   ggplot() +     geom_sf_icon(data = nc, icon = \"point-start\", size = 10)     nc$icon <- rep(c(\"1\", \"2\", \"3\", \"4\"), nrow(nc) / 4)   ggplot() +     geom_sf_icon(data = nc, size = 5) } }"},{"path":"/reference/get_asp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get aspect ratio from string or for paper or page block — get_asp","title":"Get aspect ratio from string or for paper or page block — get_asp","text":"Get aspect ratio string paper page block","code":""},{"path":"/reference/get_asp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get aspect ratio from string or for paper or page block — get_asp","text":"","code":"get_asp(   asp = NULL,   paper = NULL,   orientation = NULL,   margin = NULL,   unit = NULL,   block_asp = FALSE )"},{"path":"/reference/get_asp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get aspect ratio from string or for paper or page block — get_asp","text":"asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp returns value without modification. paper Paper, Default: 'letter' orientation Orientation \"portrait\", \"landscape\", \"square\", Default: 'portrait' margin Margin style (options include \"extrawide\", \"wide\", \"standard\", \"narrow\", \"none\"), Additional \"auto\" option generate margin based line length planned yet implemented. Default: NULL (equivalent \"none\") unit Unit margin distance, Default: '' block_asp TRUE, get aspect ratio map/plot area (including margins); defaults FALSE.","code":""},{"path":"/reference/get_asp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get aspect ratio from string or for paper or page block — get_asp","text":"OUTPUT_DESCRIPTION","code":""},{"path":"/reference/get_asp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get aspect ratio from string or for paper or page block — get_asp","text":"DETAILS","code":""},{"path":"/reference/get_asp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get aspect ratio from string or for paper or page block — get_asp","text":"","code":"if (FALSE) { if (interactive()) {   get_asp(\"1:2\")    get_asp(11 / 17)    get_asp(paper = \"letter\") } }"},{"path":"/reference/get_esri_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from an ArcGIS FeatureServer or MapServer for a location — get_esri_data","title":"Get data from an ArcGIS FeatureServer or MapServer for a location — get_esri_data","text":"Wraps esri2sf esri2df function download ArcGIS FeatureServer MapServer. Supports spatial filtering bounding box based location filtering location name (location name column provided).","code":""},{"path":"/reference/get_esri_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from an ArcGIS FeatureServer or MapServer for a location — get_esri_data","text":"","code":"get_esri_data(   location = NULL,   url,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   crs = NULL,   where = NULL,   coords_col = NULL,   lonlat = TRUE,   locationname_col = NULL,   locationname,   ... )"},{"path":"/reference/get_esri_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from an ArcGIS FeatureServer or MapServer for a location — get_esri_data","text":"location sf object. Optional. used trim TRUE. url FeatureServer MapServer url retrieve data . Passed url parameter esri2sf esri2df functions. dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Units passed units::set_units() converted units matching GDAL; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp returns value without modification. crs coordinate reference system use query; default 4326 query string passed esri2sf, Default: NULL coords_col coordinate columns, e.g. c(\"longitude\", \"latitude\") lonlat FALSE, assume coords_col lat/lon order; defaults TRUE, locationname_col name ArcGIS FeatureServer MapServer column location names features locationname location name","code":""},{"path":[]},{"path":"/reference/get_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Get location of specified type — get_location","title":"Get location of specified type — get_location","text":"Filter name id use spatial filter based sf object geocoded street address. Optionally can use index function match type predefined group data sets.","code":""},{"path":"/reference/get_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get location of specified type — get_location","text":"","code":"get_location(   type,   name = NULL,   id = NULL,   location = NULL,   label = NULL,   name_col = \"name\",   id_col = \"id\",   index = NULL,   union = FALSE,   ... )"},{"path":"/reference/get_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get location of specified type — get_location","text":"type sf object type location return, e.g. list neighborhoods. Type set features select character string references set features can passed get_location_data. name location name return id location id return. id coerced character numeric match class id_col type. location address sf object passed st_filter. location address, string geocoded using geo) also used spatial filter. label optional label added \"label\" column; must length 1 match rows output location. union = TRUE, using label recommended. Default: NULL name_col Column name type name values, Default: 'name' Required name provided. id_col Column name type id values, Default: 'id'. Required id provided. index Optional list used match type data, Default: NULL union TRUE location, union location geometry st_union combine names Default: FALSE ... Additional parameters passed get_location_data type character index NULL","code":""},{"path":"/reference/get_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get location of specified type — get_location","text":"sf object (subset type data)","code":""},{"path":"/reference/get_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get location of specified type — get_location","text":"","code":"if (FALSE) { if (interactive()) {   nc <- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"))   # Check if type as sf object with name/id lookup works   get_location(type = nc, name = \"Warren\", name_col = \"NAME\")   get_location(type = nc, id = 37185, id_col = \"FIPSNO\")    # Type also supports a range of other formats including    # File path   get_location(     type = system.file(\"shape/nc.shp\", package = \"sf\"),     name = \"Hertford\",     name_col = \"NAME\"   )    # Index name (if a named list of datasets, urls, or paths is passed to index)   get_location(     type = \"smaller\",     name = \"Hertford\",     name_col = \"NAME\",     index = list(       \"smaller\" = dplyr::filter(nc, AREA <= 0.10),       \"larger\" = dplyr::filter(nc, AREA > 0.15)     )   )    # url may require passing extra parameters to `get_location_data()`   # In this example, no location information is passed to get_location() so it warns before returning all types   get_location(     type = \"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Parks/FeatureServer/0\",     locationname_col = \"NAME\",     locationname = \"Chesapeake and Ohio Canal National Historic Park\"   ) } }"},{"path":"/reference/get_location_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data for a location — get_location_data","title":"Get data for a location — get_location_data","text":"Returns data selected area areas optional buffer. crop trim FALSE, function uses st_intersects filter data include full geometry anything overlaps area bbox (area provided).","code":""},{"path":"/reference/get_location_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data for a location — get_location_data","text":"","code":"get_location_data(   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   data = NULL,   url = NULL,   path = NULL,   package = NULL,   filetype,   fn = NULL,   crop = TRUE,   trim = FALSE,   from_crs = NULL,   crs = NULL,   ... )"},{"path":"/reference/get_location_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data for a location — get_location_data","text":"location sf object. multiple areas provided, unioned single sf object using st_union dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Units passed units::set_units() converted units matching GDAL; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp returns value without modification. data sf object including data area. data may also url file path. data can name data object , package filetype provided, cached external file. url url FeatureServer MapServer layer pass get_area_esri_data. url can provided data parameter path path spatial data file supported read_sf package package name. filetype file type supported read_sf. file type must provided extdata cached data. fn Function apply data returning. crop TRUE, data cropped location bounding box st_crop adjusted dist, diag_ratio, asp parameters provided. Default TRUE. trim TRUE, data trimmed area st_intersection. option supported adjusted areas use dist, diag_ratio, asp parameters. Default FALSE. from_crs coordinate reference system data. crs coordinate reference system return ... additional parameters passed read_sf_path, read_sf_url, read_sf_package","code":""},{"path":"/reference/get_margin.html","id":null,"dir":"Reference","previous_headings":"","what":"Get margins for a ggplot2 plot or map based on style or distance — get_margin","title":"Get margins for a ggplot2 plot or map based on style or distance — get_margin","text":"function works combination get_paper() function make easier position map page saving file. primarily useful adapting gglpot2 map plot print document format composed outside R using page layout application Adobe InDesign.","code":""},{"path":"/reference/get_margin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get margins for a ggplot2 plot or map based on style or distance — get_margin","text":"","code":"get_margin(   margin = NULL,   paper = NULL,   orientation = NULL,   dist = NULL,   unit = \"in\",   plot_width = NULL )"},{"path":"/reference/get_margin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get margins for a ggplot2 plot or map based on style or distance — get_margin","text":"margin Margin style (options include \"extrawide\", \"wide\", \"standard\", \"narrow\", \"none\"), Additional \"auto\" option generate margin based line length planned yet implemented. Default: NULL (equivalent \"none\") paper Paper, Default: 'letter' orientation Orientation \"portrait\", \"landscape\", \"square\", Default: 'portrait' dist Margin distance (single value used sides), Default: NULL unit Unit margin distance, Default: '' plot_width Plot map width units. paper plot_width provided, margins half distance two evenly distributed. tested may work page sizes/orientations.","code":""},{"path":"/reference/get_margin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get margins for a ggplot2 plot or map based on style or distance — get_margin","text":"ggplot2::margin() element intended use ggplot2::element_rect() plot.background theme element.","code":""},{"path":[]},{"path":"/reference/get_margin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get margins for a ggplot2 plot or map based on style or distance — get_margin","text":"","code":"if (FALSE) { if (interactive()) {   get_margins(\"standard\")    get_margins(\"none\")    get_margins(dist = 25, unit = \"mm\")    get_margins(paper = \"letter\", plot_width = 5.5) } }"},{"path":"/reference/get_osm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Open Street Map features for a location — get_osm_data","title":"Get Open Street Map features for a location — get_osm_data","text":"Wraps osmdata functions.","code":""},{"path":"/reference/get_osm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Open Street Map features for a location — get_osm_data","text":"","code":"get_osm_data(   location = NULL,   key,   value = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   crs = NULL,   geometry = NULL,   osmdata = FALSE )"},{"path":"/reference/get_osm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Open Street Map features for a location — get_osm_data","text":"location sf, sfc, bbox object key feature key overpass API query. value value feature key; can negated initial exclamation mark, value = \"!\", can also vector, value = c (\"\", \"\"). value = \"\" key = \"building\" values passed osmdata osmdata::available_tags(key). dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Units passed units::set_units() converted units matching GDAL; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp returns value without modification. crs coordinate reference system output data; NULL, data remains OSM CRS 4326. Default: NULL. geometry geometry output \"polygons\", \"points\", \"lines\", \"multilines\", \"multipolygons\"; NULL return sf object mixed geometry (multiple geometry types present). Default NULL osmdata TRUE return osmdata class object includes overpass API call, metadata including timestamp version numbers, available geometry types; defaults FALSE.","code":""},{"path":"/reference/get_paper.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paper sizes — get_paper","title":"Get paper sizes — get_paper","text":"Use \"paper\" parameter (matching name paper_sizes), standard (optionally including series size) parameter, width, height units. May return multiple paper sizes.","code":""},{"path":"/reference/get_paper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paper sizes — get_paper","text":"","code":"get_paper(   paper = \"letter\",   orientation = \"portrait\",   standard = NULL,   series = NULL,   size = NULL,   width = NULL,   height = NULL,   units = NULL )"},{"path":"/reference/get_paper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paper sizes — get_paper","text":"paper Paper, Default: 'letter' orientation Orientation \"portrait\", \"landscape\", \"square\", Default: 'portrait' standard Size standard, \"ANSI\" \"ISO\" series Size series (e.g. ), Default: NULL width width units, Default: NULL height height units, Default: NULL units \"\" \"mm\"; Default: NULL (defaults \"\" width height provided.)","code":""},{"path":"/reference/get_paper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paper sizes — get_paper","text":"Data frame paper sizes","code":""},{"path":"/reference/get_paper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paper sizes — get_paper","text":"","code":"if (FALSE) { if (interactive()) {   get_paper(\"letter\")    get_paper(paper = NULL, standard = \"ISO\", series = \"A\", size = 4)    get_paper(width = 11, height = 17) } }"},{"path":"/reference/ggsave_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a ggplot and update file EXIF metadata — ggsave_ext","title":"Save a ggplot and update file EXIF metadata — ggsave_ext","text":"Save plot map update EXIF metadata title, author, create data. ggsave_ext() also supports creating file name based sentence case name spaces (e.g. \"Baltimore city map\") appending label (e.g. \"baltcity\") prefix output file name.","code":""},{"path":"/reference/ggsave_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a ggplot and update file EXIF metadata — ggsave_ext","text":"","code":"ggsave_ext(   name = NULL,   label = NULL,   plot = last_plot(),   filename = NULL,   path = NULL,   device = \"png\",   paper = NULL,   orientation = \"portrait\",   scale = 1,   width,   height,   units = \"in\",   dpi = 300,   bg = NULL,   exif = FALSE,   title = NULL,   author,   args = NULL,   prefix = \"date\",   ... )"},{"path":"/reference/ggsave_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a ggplot and update file EXIF metadata — ggsave_ext","text":"name name plot, used create filename (filename provided) label label appended filename prefix; defaults NULL plot Plot save, defaults last plot displayed. filename File name create disk. path Path directory save plot : path filename combined create fully qualified file name. Defaults working directory. device Device use. Can either device function (e.g. png), one \"eps\", \"ps\", \"tex\" (pictex), \"pdf\", \"jpeg\", \"tiff\", \"png\", \"bmp\", \"svg\" \"wmf\" (windows ). paper paper matching name paper_sizes (e.g. \"letter\"). case sensitive orientation \"portrait\", \"landscape\", \"square\" scale Multiplicative scaling factor. width Plot size units (\"\", \"cm\", \"mm\", \"px\"). supplied, uses size current graphics device. height Plot size units (\"\", \"cm\", \"mm\", \"px\"). supplied, uses size current graphics device. units Plot size units (\"\", \"cm\", \"mm\", \"px\"). supplied, uses size current graphics device. dpi Plot resolution. Also accepts string input: \"retina\" (320), \"print\" (300), \"screen\" (72). Applies raster output types. bg Background colour. NULL, uses plot.background fill value plot theme. exif TRUE, edit exif metadata exported file using exifr package, Default: FALSE title title plot map, added exif metadata, Default: NULL author author plot map, added exif metadata, args args passed exiftoolr, args NULL, title author ignored, Default: NULL prefix \"date\", date Sys.Date() appended filename prefix (label). \"time\", Sys.time() appended. ... additional parameters passed ggsave","code":""},{"path":[]},{"path":"/reference/ggsave_ext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a ggplot and update file EXIF metadata — ggsave_ext","text":"","code":"if (FALSE) { if (interactive()) {   neighborhoods <-     get_location(       type = \"neighborhoods\",       package = \"mapbaltimore\"     )    ggplot2::ggplot() +     ggplot2::geom_sf(data = neighborhoods)    ggsave_ext(     name = \"neighborhoods\",     label = \"Baltimore City\",     author = \"Thomas H. Poppleton\",     device = \"pdf\",     paper = \"letter\"   ) } }"},{"path":"/reference/layer_location_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer location data into a ggplot2 map — layer_location_data","title":"Layer location data into a ggplot2 map — layer_location_data","text":"Helper function make ggplot2 layer data returned get_location_data","code":""},{"path":"/reference/layer_location_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer location data into a ggplot2 map — layer_location_data","text":"","code":"layer_location_data(   data = NULL,   label,   geom = \"sf\",   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = \"meter\",   asp = NULL,   package = NULL,   filetype = NULL,   fn = NULL,   crop = TRUE,   trim = FALSE,   from_crs = NULL,   crs = NULL,   ... )"},{"path":"/reference/layer_location_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer location data into a ggplot2 map — layer_location_data","text":"data sf object including data area. data may also url file path. data can name data object , package filetype provided, cached external file. label label area (appended data prefix data string) geom ggplot2 geom use, Default: 'sf'. Options include \"sf\" (geom_sf), \"icon\" (geom_sf_icon), \"text\" (geom_sf_text), \"label\" (geom_sf_label) location sf object. multiple areas provided, unioned single sf object using st_union dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit unit adjust location dist diag_ratio; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp returns value without modification. package package name. filetype file type supported read_sf. file type must provided extdata cached data. fn Function apply data returning. crop TRUE, data cropped location bounding box st_crop adjusted dist, diag_ratio, asp parameters provided. Default TRUE. trim TRUE, data trimmed area st_intersection. option supported adjusted areas use dist, diag_ratio, asp parameters. Default FALSE. from_crs coordinate reference system data. crs coordinate reference system return ... Parameters passed selected geom","code":""},{"path":"/reference/layer_location_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer location data into a ggplot2 map — layer_location_data","text":"ggplot2 geom","code":""},{"path":[]},{"path":"/reference/layer_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a mask layer based on a simple feature object — layer_mask","title":"Create a mask layer based on a simple feature object — layer_mask","text":"Returns mask area areas  sf object.","code":""},{"path":"/reference/layer_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a mask layer based on a simple feature object — layer_mask","text":"","code":"layer_mask(   data = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   crs = NULL,   fill = \"white\",   color = NA,   alpha = 0.5,   mask = NULL,   neatline = FALSE,   ... )"},{"path":"/reference/layer_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a mask layer based on a simple feature object — layer_mask","text":"data sf, sfc, bbox object. dist, diag_ratio, /asp provided, data adjusted set boundaries mask. data provided, mask required. dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Units passed units::set_units() converted units matching GDAL; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp returns value without modification. crs Coordinate reference system bounding box return fill mask fill color; defaults \"white\" color mask edge color; defaults NA alpha mask alpha/transparency; defaults 0.5 mask bbox object define edge mask. diag_ratio, dist, asp parameters ignored mask provided. defaults NULL neatline TRUE, add layer_neatline expand = TRUE; defaults FALSE. ... Additional parameters pass geom_sf","code":""},{"path":"/reference/layer_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a mask layer based on a simple feature object — layer_mask","text":"geom_sf function.","code":""},{"path":"/reference/layer_neatline.html","id":null,"dir":"Reference","previous_headings":"","what":"Set map limits to sf or bbox object with optional adjustments and panel border — layer_neatline","title":"Set map limits to sf or bbox object with optional adjustments and panel border — layer_neatline","text":"Set limits map bounding box x using coord_sf. Optionally, adjust x size applying buffer /adjust aspect ratio limiting bounding box match set aspect ratio.","code":""},{"path":"/reference/layer_neatline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set map limits to sf or bbox object with optional adjustments and panel border — layer_neatline","text":"","code":"layer_neatline(   data = NULL,   dist = NULL,   diag_ratio = NULL,   unit = \"meter\",   asp = NULL,   crs = NULL,   color = \"black\",   size = 1,   linetype = \"solid\",   expand = FALSE,   hide_grid = TRUE,   label_axes = \"----\",   ... )"},{"path":"/reference/layer_neatline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set map limits to sf or bbox object with optional adjustments and panel border — layer_neatline","text":"data sf bbox class object dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit buffer units; defaults meter. asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp returns value without modification. crs Coordinate reference system use coord_sf. color color panel border, Default: 'black' size size panel border, Default: 1 linetype line type panel border, Default: 'solid' expand Default FALSE. TRUE, use scale_y_continuous scale_x_continuous expand map extent provided parameters. hide_grid logical. TRUE, hide major grid lines. Default: TRUE label_axes label_axes passed coord_sf, Default: '----' hides axes labels. ... Additional parameters pass coord_sf.","code":""},{"path":"/reference/layer_neatline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set map limits to sf or bbox object with optional adjustments and panel border — layer_neatline","text":"ggplot2::coord_sf() function xlim ylim parameters","code":""},{"path":[]},{"path":"/reference/layer_neatline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set map limits to sf or bbox object with optional adjustments and panel border — layer_neatline","text":"","code":"if (FALSE) { if (interactive()) {   library(ggplot2)    nc <- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"))   ggplot() +     geom_sf(data = nc) +     layer_neatline(data = nc[1, ], asp = 1, color = \"red\") } }"},{"path":"/reference/map_icons.html","id":null,"dir":"Reference","previous_headings":"","what":"Map icons — map_icons","title":"Map icons — map_icons","text":"index map icons four sources: mapbox/maki ideditor/temaki manifestinteractive/weather-underground-icons openstreetmap/map-icons openstreetmap/lane-icons Esri/calcite-point-symbols icon sources use open licenses. Maki, Temaki, OSM lane icons use CC0 license. Weather Underground Icons use MIT license. OSM map icons use unspecified PD style license. Calcite icons available Esri Master License Agreement (MLA).","code":""},{"path":"/reference/map_icons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map icons — map_icons","text":"","code":"map_icons"},{"path":"/reference/map_icons.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Map icons — map_icons","text":"data frame 1855 rows 5 variables: name Icon name url Icon URL GitHub repo style Icon style (Weather Underground icons ) size Icon width/height (pixels) repo GitHub repository icon collection","code":""},{"path":"/reference/overedge-package.html","id":null,"dir":"Reference","previous_headings":"","what":"overedge: Assorted Functions For Easier Map Making — overedge-package","title":"overedge: Assorted Functions For Easier Map Making — overedge-package","text":"Assorted functions support data wrangling visualization map making focus ggplot2 sf packages.","code":""},{"path":"/reference/overedge-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"overedge: Assorted Functions For Easier Map Making — overedge-package","text":"Maintainer: Eli Pousson eli.pousson@gmail.com (ORCID)","code":""},{"path":"/reference/paper_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Common paper sizes — paper_sizes","title":"Common paper sizes — paper_sizes","text":"Reference table common paper sizes used get_paper() ggsave_ext() functions. Derived visioguy/PaperSizes repo.","code":""},{"path":"/reference/paper_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common paper sizes — paper_sizes","text":"","code":"paper_sizes"},{"path":"/reference/paper_sizes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common paper sizes — paper_sizes","text":"data frame 85 rows 9 variables: name Name paper series Series standard Standard size Size series units Units (\"\" \"mm\") dimensions width Width units height Height units asp_portrait Aspect ratio (portrait) asp_landscape Aspect ratio (landscape) asp_text Aspect ratio (\"width:height\")","code":""},{"path":"/reference/read_sf_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Read spatial data in a bounding box to a simple feature object — read_sf_path","title":"Read spatial data in a bounding box to a simple feature object — read_sf_path","text":"extended version read_sf support reading spatial data based file path, url (spatial data ArcGIS FeatureServer MapServer), data name associated package. Optionally provide bounding box filter data.","code":""},{"path":"/reference/read_sf_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read spatial data in a bounding box to a simple feature object — read_sf_path","text":"","code":"read_sf_path(path, bbox = NULL, ...)  read_sf_url(url, bbox = NULL, ...)  read_sf_package(data, bbox = NULL, package, filetype = \"gpkg\", ...)"},{"path":"/reference/read_sf_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read spatial data in a bounding box to a simple feature object — read_sf_path","text":"path file path bbox bbox object; Default: NULL. bbox provided, read_sf returns features intersecting bounding box. ... additional parameters passed read_sf url url spatial data file ArcGIS FeatureServer MapServer access get_esri_data() data character; name data. package character; package name filetype file type supported  read_sf., Default: 'gpkg'. Required data cache directory extdata system files.","code":""},{"path":"/reference/read_sf_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read spatial data in a bounding box to a simple feature object — read_sf_path","text":"sf object","code":""},{"path":"/reference/read_sf_ext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read spatial data in a bounding box to a simple feature object — read_sf_path","text":"function looks three types package data: = Data loaded package External data extdata system files folder. Cached data cache directory returned user_cache_dir","code":""},{"path":"/reference/sf_bbox_to_lonlat_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a bounding box to lon/lat query string — sf_bbox_to_lonlat_query","title":"Convert a bounding box to lon/lat query string — sf_bbox_to_lonlat_query","text":"Take bounding box return SQL style query string lon/lat values.","code":""},{"path":"/reference/sf_bbox_to_lonlat_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a bounding box to lon/lat query string — sf_bbox_to_lonlat_query","text":"","code":"sf_bbox_to_lonlat_query(   bbox,   coords = c(\"longitude\", \"latitude\"),   crs = 4326,   lonlat = TRUE )"},{"path":"/reference/sf_bbox_to_lonlat_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a bounding box to lon/lat query string — sf_bbox_to_lonlat_query","text":"bbox bounding box coords query column lon/lat coordinates crs coordinate reference system use query; default 4326 lonlat Default TRUE. FALSE, coords assumed lat/lon order instead lon/lat.","code":""},{"path":"/reference/sf_bbox_to_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a bounding box into simple feature object — sf_bbox_to_sf","title":"Convert a bounding box into simple feature object — sf_bbox_to_sf","text":"Take bbox return sf object.","code":""},{"path":"/reference/sf_bbox_to_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a bounding box into simple feature object — sf_bbox_to_sf","text":"","code":"sf_bbox_to_sf(bbox)"},{"path":"/reference/sf_bbox_to_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a bounding box into simple feature object — sf_bbox_to_sf","text":"bbox bbox object","code":""},{"path":"/reference/sf_bbox_to_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a bounding box into simple feature object — sf_bbox_to_sf","text":"sf object","code":""},{"path":[]},{"path":"/reference/sf_bbox_to_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a bounding box to well known text (wkt) — sf_bbox_to_wkt","title":"Convert a bounding box to well known text (wkt) — sf_bbox_to_wkt","text":"Take bbox return well known text use wkt_filter parameter read_sf.","code":""},{"path":"/reference/sf_bbox_to_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a bounding box to well known text (wkt) — sf_bbox_to_wkt","text":"","code":"sf_bbox_to_wkt(bbox)"},{"path":"/reference/sf_bbox_to_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a bounding box to well known text (wkt) — sf_bbox_to_wkt","text":"bbox bbox object","code":""},{"path":"/reference/sf_bbox_to_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a bounding box to well known text (wkt) — sf_bbox_to_wkt","text":"well known text","code":""},{"path":[]},{"path":"/reference/st_bbox_adj.html","id":null,"dir":"Reference","previous_headings":"","what":"Get bounding box buffered and adjusted to match aspect ratio — st_bbox_adj","title":"Get bounding box buffered and adjusted to match aspect ratio — st_bbox_adj","text":"Takes area sf object bounding box returns bounding box matches provided aspect ratio contains area bounding box provided.","code":""},{"path":"/reference/st_bbox_adj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get bounding box buffered and adjusted to match aspect ratio — st_bbox_adj","text":"","code":"st_bbox_adj(   x = NULL,   dist = NULL,   diag_ratio = NULL,   asp = NULL,   unit = NULL,   crs = NULL )"},{"path":"/reference/st_bbox_adj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get bounding box buffered and adjusted to match aspect ratio — st_bbox_adj","text":"x sf adjust dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp returns value without modification. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Units passed units::set_units() converted units matching GDAL; defaults \"meter\" crs Coordinate reference system bounding box return","code":""},{"path":"/reference/st_bbox_adj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get bounding box buffered and adjusted to match aspect ratio — st_bbox_adj","text":"Class bbox object","code":""},{"path":"/reference/st_bbox_adj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get bounding box buffered and adjusted to match aspect ratio — st_bbox_adj","text":"Common aspect ratios include \"1:1\" (1), \"4:6\" (0.666), \"8.5:11\", \"16:9\" (1.777). asp parameter supports numeric values character strings ratios matching format \"width:height\".","code":""},{"path":"/reference/st_bbox_asp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get bounding box adjusted to match aspect ratio — st_bbox_asp","title":"Get bounding box adjusted to match aspect ratio — st_bbox_asp","text":"Get bbox sf bbox object adjusted match aspect ratio","code":""},{"path":"/reference/st_bbox_asp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get bounding box adjusted to match aspect ratio — st_bbox_asp","text":"","code":"st_bbox_asp(x = NULL, asp = NULL)"},{"path":"/reference/st_bbox_asp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get bounding box adjusted to match aspect ratio — st_bbox_asp","text":"x sf bbox object asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp returns value without modification.","code":""},{"path":"/reference/st_bbox_asp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get bounding box adjusted to match aspect ratio — st_bbox_asp","text":"bbox object","code":""},{"path":"/reference/st_bbox_asp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get bounding box adjusted to match aspect ratio — st_bbox_asp","text":"Takes area  sf bbox object returns bounding box matches aspect ratio provided asp contains area bounding box provided. Common aspect ratios include \"1:1\" (1), \"4:6\" (0.666), \"8.5:11\", \"16:9\" (1.777). asp parameter supports numeric values character strings ratios matching format \"width:height\".","code":""},{"path":"/reference/st_bearing.html","id":null,"dir":"Reference","previous_headings":"","what":"Get bearing of a simple feature object with LINESTRING geometry — st_bearing","title":"Get bearing of a simple feature object with LINESTRING geometry — st_bearing","text":"Get bearing simple feature object LINESTRING geometry","code":""},{"path":"/reference/st_bearing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get bearing of a simple feature object with LINESTRING geometry — st_bearing","text":"","code":"st_bearing(x, dir = FALSE, crs = 4326)"},{"path":"/reference/st_bearing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get bearing of a simple feature object with LINESTRING geometry — st_bearing","text":"x object class sf dir logical; FALSE, return absolute (positive) bearing value. TRUE, return negative positive bearing values. Default: FALSE. crs Coordinate reference system passed sf::st_coordinates() (must geographic projected). Default: 4326","code":""},{"path":[]},{"path":"/reference/st_bearing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get bearing of a simple feature object with LINESTRING geometry — st_bearing","text":"","code":"if (FALSE) { if(interactive()){  library(ggplot2)   nc <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\"))  nc_pts <- sf::st_centroid(nc)  nc_line <-    sf::st_as_sf(      sf::st_cast(sf::st_union(c(nc_pts[1,]$geometry, nc_pts[30,]$geometry)), \"LINESTRING\")      )   ggplot() +    geom_sf(data = nc) +    geom_sf(data = nc_pts) +    geom_sf(data = st_bearing(nc_line), aes(color = bearing))  } }"},{"path":"/reference/st_buffer_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Buffer a simple feature or bounding box object — st_buffer_ext","title":"Buffer a simple feature or bounding box object — st_buffer_ext","text":"Return sf object buffer based dist proportion diagonal distance defined diag_ratio. x uses geographic coordinates, coordinate reference system transformed crs returned suggest_top_crs transformed back original CRS buffer applied.","code":""},{"path":"/reference/st_buffer_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Buffer a simple feature or bounding box object — st_buffer_ext","text":"","code":"st_buffer_ext(x, dist = NULL, diag_ratio = NULL, unit = \"meter\", ...)"},{"path":"/reference/st_buffer_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Buffer a simple feature or bounding box object — st_buffer_ext","text":"x sf bbox object. dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Units passed units::set_units() converted units matching GDAL; defaults \"meter\" ... additional parameters passed  st_buffer.","code":""},{"path":"/reference/st_inscribed_square.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an inscribed square in a simple feature object — st_inscribed_square","title":"Create an inscribed square in a simple feature object — st_inscribed_square","text":"function wraps sf::st_inscribed_circle() limits circle 1 segment per quadrant (nQuadSegs = 1) rotates resulting geometry 45 degrees provide (mostly) inscribed square. different rotation value can provided change orientation shap, e.g. rotate = -45 return diamond shape.","code":""},{"path":"/reference/st_inscribed_square.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an inscribed square in a simple feature object — st_inscribed_square","text":"","code":"st_inscribed_square(x, rotate = 0)"},{"path":"/reference/st_inscribed_square.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an inscribed square in a simple feature object — st_inscribed_square","text":"x object class sf rotate numeric; degrees rotate square geometry, Default: 0","code":""},{"path":[]},{"path":"/reference/st_inscribed_square.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an inscribed square in a simple feature object — st_inscribed_square","text":"","code":"if (FALSE) { if(interactive()){  library(ggplot2)   nc <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\"))  nc_squares <- st_inscribed_square(sf::st_transform(nc, 2264))   ggplot() +   geom_sf(data = nc) +   geom_sf(data = nc_squares, fill = NA, color = \"red\")  } }"},{"path":"/reference/st_scale_rotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale or rotate a simple feature object — st_scale_rotate","title":"Scale or rotate a simple feature object — st_scale_rotate","text":"Scale rotate simple feature object using affine transformations","code":""},{"path":"/reference/st_scale_rotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale or rotate a simple feature object — st_scale_rotate","text":"","code":"st_scale_rotate(x, scale = 1, rotate = 0)"},{"path":"/reference/st_scale_rotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale or rotate a simple feature object — st_scale_rotate","text":"x object class sf scale numeric; scale factor, Default: 1 rotate numeric; degrees rotate (-360 360), Default: 0","code":""},{"path":"/reference/st_scale_rotate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scale or rotate a simple feature object — st_scale_rotate","text":"DETAILS","code":""},{"path":[]},{"path":"/reference/st_scale_rotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale or rotate a simple feature object — st_scale_rotate","text":"","code":"if (FALSE) { if(interactive()){  library(ggplot2)   nc <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\"))  nc_rotated <- st_scale_rotate(nc, scale = 0.5, rotate = 15)   ggplot() +   geom_sf(data = nc) +   geom_sf(data = nc_rotated, fill = NA, color = \"red\")  } }"},{"path":"/reference/theme_margin.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, update, or replace margins for ggplot theme — theme_margin","title":"Set, update, or replace margins for ggplot theme — theme_margin","text":"Set, update, replace margins ggplot theme","code":""},{"path":"/reference/theme_margin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, update, or replace margins for ggplot theme — theme_margin","text":"","code":"theme_margin(   margin = \"standard\",   paper = NULL,   orientation = NULL,   dist = NULL,   unit = \"in\",   plot_width = NULL,   fill = NA,   color = NA,   size = 0,   method = NULL )"},{"path":"/reference/theme_margin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, update, or replace margins for ggplot theme — theme_margin","text":"paper Paper, Default: 'letter' orientation Orientation \"portrait\", \"landscape\", \"square\", Default: 'portrait' fill fill plot.background passed ggplot2::element_rect(), Default: NA color color plot.background passed ggplot2::element_rect(), Default: NA method ggplot2 function use changing text \"set\", \"update\", \"replace\", Default: 'set'","code":""},{"path":[]},{"path":"/reference/theme_margin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, update, or replace margins for ggplot theme — theme_margin","text":"","code":"if (FALSE) { if (interactive()) {   ggplot() +     layer_loc   theme_margin(paper = \"letter\")    theme_margin(margin = \"narrow\", paper = \"letter\") } }"},{"path":"/reference/theme_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, update, or replace text family for ggplot theme and geoms — theme_text","title":"Set, update, or replace text family for ggplot theme and geoms — theme_text","text":"Set, update, replace text family ggplot theme geoms","code":""},{"path":"/reference/theme_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, update, or replace text family for ggplot theme and geoms — theme_text","text":"","code":"theme_text(   font_family = \"Helvetica\",   color = \"black\",   method = NULL,   geom = TRUE )"},{"path":"/reference/theme_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, update, or replace text family for ggplot theme and geoms — theme_text","text":"font_family Font family, Default: 'Helvetica' NULL, font_family pulled current set theme helpful resetting text families theme. method ggplot2 function use changing text \"set\", \"update\", \"replace\", Default: 'set' geom TRUE, update text family geom_text, geom_sf_text, geom_label, geom_sf_label match font_family. FALSE, make changes theme. Default: TRUE","code":""},{"path":[]},{"path":"/reference/write_sf_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Save simple features to files, cache features, or load features to the environment — write_sf_ext","title":"Save simple features to files, cache features, or load features to the environment — write_sf_ext","text":"function wraps sf::write_sf() list2env() facilitate saving simple feature objects named lists simple feature objects.","code":""},{"path":"/reference/write_sf_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save simple features to files, cache features, or load features to the environment — write_sf_ext","text":"","code":"write_sf_ext(   data,   filename = NULL,   filetype = \"geojson\",   data_dir = NULL,   save = FALSE,   load = TRUE,   cache = FALSE )"},{"path":"/reference/write_sf_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save simple features to files, cache features, or load features to the environment — write_sf_ext","text":"filetype File type write cache, Default: 'geojson' data_dir Data directory write files, Default: NULL save TRUE, write ; defaults TRUE load TRUE, load sf objects global environment; defaults FALSE cache TRUE, write sf object(s) file cache directory; defaults FALSE x sf object list sf objects","code":""},{"path":[]}]
