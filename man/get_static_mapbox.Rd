% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_static_mapbox.R
\name{get_static_mapbox}
\alias{get_static_mapbox}
\alias{get_osm_static_mapbox}
\alias{get_location_static_mapbox}
\title{Use {mapboxapi} to get a static Mapbox map image}
\usage{
get_static_mapbox(
  location,
  dist = NULL,
  unit = "meter",
  overlay_location = TRUE,
  style_url = "mapbox://styles/mapbox/light-v10",
  overlay_sf = NULL,
  overlay_style = NULL,
  zoom = NULL,
  width = 600,
  height = 400,
  bearing = NULL,
  pitch = NULL,
  ...
)

get_osm_static_mapbox(
  id = NULL,
  key = NULL,
  level = NULL,
  location = NULL,
  dist = NULL,
  unit = "meter",
  overlay_location = TRUE,
  style_url = "mapbox://styles/mapbox/light-v10",
  overlay_sf = NULL,
  overlay_style = NULL,
  zoom = NULL,
  width = 600,
  height = 400,
  bearing = NULL,
  pitch = NULL,
  ...
)

get_location_static_mapbox(
  type,
  dist = NULL,
  unit = "meter",
  name = NULL,
  name_col = "name",
  id = NULL,
  id_col = "id",
  location = NULL,
  index = NULL,
  union = FALSE,
  overlay_location = TRUE,
  style_url = "mapbox://styles/mapbox/light-v10",
  overlay_sf = NULL,
  overlay_style = NULL,
  zoom = NULL,
  width = 600,
  height = 400,
  bearing = NULL,
  pitch = NULL,
  ...
)
}
\arguments{
\item{location}{An input location for which you would like to request tiles.
Can be a length-4 vector representing a bounding box, or an \code{sf} object.
If an input \code{sf} object is supplied, use the \code{buffer_dist} argument to
control how much area you want to capture around the layer.
While the input \code{sf} object can be in an arbitrary coordinate reference system,
if a length-4 bounding box vector is supplied instead it must represent
WGS84 longitude/latitude coordinates and be in the order
\code{c(xmin, ymin, xmax, ymax)}.}

\item{dist}{Buffer distance passed to buffer_dist parameter of \code{\link[mapboxapi:static_mapbox]{mapboxapi::static_mapbox()}}.}

\item{unit}{Unit of \code{dist} argument. \code{dist} is converted from \code{unit} to meters for \code{\link[mapboxapi:static_mapbox]{mapboxapi::static_mapbox()}}.}

\item{overlay_location}{If \code{TRUE}, use the location (or OpenStreetMap feature) as the overlay_sf parameter.}

\item{style_url}{Style URL; defaults to "mapbox://styles/mapbox/light-v10"}

\item{overlay_sf}{The overlay \code{sf} object (optional). The function will
convert the \code{sf} object to GeoJSON then plot over the basemap style.
Spatial data that are too large will trigger an error, and should be added
to the style in Mapbox Studio instead.}

\item{overlay_style}{A named list of vectors specifying how to style the sf
overlay. Possible names are "stroke", "stroke-width", "stroke-opacity",
"fill", and "fill-opacity". The fill and stroke color values should be
specified as six-digit hex codes, and the opacity and width values should
be supplied as floating-point numbers.}

\item{zoom}{The map zoom. The map will infer this from the overlay unless
longitude, latitude, and zoom are all specified.}

\item{width, height}{Map width and height; defaults to 600 px width and 400 px height.}

\item{pitch, bearing}{The map pitch and bearing; defaults to \code{NULL}. pitch can
range from 0 to 60, and bearing from 0 to 360.}

\item{...}{Additional parameters passed to \link{get_location_data} if type
is character and index is \code{NULL}.}

\item{id}{OpenStreetMap feature id}

\item{key}{Feature key for overpass API query.}

\item{level}{administrative level (admin_level) of boundary to return;
defaults to \code{NULL}. See \url{https://wiki.openstreetmap.org/wiki/Key:admin_level}
for more information. Only used for \link{get_osm_boundaries}.}

\item{type}{For get_osm_static_mapbox, type of feature with id; ("node", "way", or "relation"); for get_location_static_mapbox, type of location (see \code{\link[=get_location]{get_location()}} for details.}

\item{name}{Location name to return.}

\item{name_col}{Column name in type with name values, Default: 'name'
Required if name provided.}

\item{id_col}{Column name in type with id values, Default: 'id'. Required if
id is provided.}

\item{index}{Optional list used to match type to data, Default: \code{NULL}}

\item{union}{If \code{TRUE}, the location geometry is unioned with
\link[sf:geos_combine]{sf::st_union} and the names are combined into a single value.
Default: \code{FALSE}.}
}
\description{
Wrapper function for \code{\link[mapboxapi:static_mapbox]{mapboxapi::static_mapbox()}}, \code{\link[=get_location]{get_location()}}, and
\code{\link[=get_osm_data]{get_osm_data()}}, \code{\link[=get_osm_id]{get_osm_id()}}, or \code{\link[=get_osm_boundaries]{get_osm_boundaries()}} functions.
}
\details{
For \link{get_osm_static_mapbox}, the ... parameters are passed to the
\code{\link[=get_osm_data]{get_osm_data()}}, \code{\link[=get_osm_id]{get_osm_id()}}, or \code{\link[=get_osm_boundaries]{get_osm_boundaries()}} functions.
}
\examples{
get_osm_static_mapbox(
  id = "way/49664223",
  dist = 0.5,
  unit = "mi",
  overlay_style = list(
    stroke = "darkgreen",
    fill = "green",
    fill_opacity = 0.25
  )
)

nc <- read_sf_path(system.file("shape/nc.shp", package = "sf"))

get_location_static_mapbox(
  type = nc,
  name = "Ashe",
  name_col = "NAME",
  dist = 50,
  unit = "mi"
)
}
