% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_location.R
\name{get_location}
\alias{get_location}
\title{Get location of specified type}
\usage{
get_location(
  type,
  name = NULL,
  id = NULL,
  location = NULL,
  label = NULL,
  name_col = "name",
  id_col = "id",
  index = NULL,
  union = FALSE,
  ...
)
}
\arguments{
\item{type}{Type of location to return. Type can be an sf object, e.g. a data
frame with multiple neighborhoods or a character string that can be passed
to \code{get_location_data}. If index is provided, character can also be a
character string to match the name of a list.}

\item{name}{Location name to return.}

\item{id}{Location id to return. id is coerced to character or numeric to
match the class of the id_col for type.}

\item{location}{An address or \code{sf} or \code{bbox} object passed to \code{\link[sf]{st_filter}}.
Any valid address or addresses are geocoded with
\code{\link[tidygeocoder]{geo}}), converted to a simple feature object, and
then used as a spatial filter.}

\item{label}{Label optionally added to "label" column; must be a length 1 or
match the number of rows returned based on the other parameters. If \code{union = TRUE},
using label is recommended. Default: \code{NULL}}

\item{name_col}{Column name in type with name values, Default: 'name'
Required if name provided.}

\item{id_col}{Column name in type with id values, Default: 'id'. Required if
id is provided.}

\item{index}{Optional list used to match type to data, Default: \code{NULL}}

\item{union}{If \code{TRUE}, the location geometry is unioned with
\code{\link[sf]{st_union}} and the names are combined into a single value.
Default: \code{FALSE}.}

\item{...}{Additional parameters passed to \code{get_location_data} if type
is character and index is \code{NULL}.}
}
\value{
A simple feature object from data provided to type.
}
\description{
Filter by name or id or use a spatial filter based on an sf object or
geocoded street address. Optionally you can use an index list to match the
type to a named list of URLs or sf objects.
}
\examples{
\dontrun{
if (interactive()) {
  nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"))
  # Check if type as sf object with name/id lookup works
  get_location(type = nc, name = "Warren", name_col = "NAME")
  get_location(type = nc, id = 37185, id_col = "FIPSNO")

  # Type also supports a range of other formats including

  # File path
  get_location(
    type = system.file("shape/nc.shp", package = "sf"),
    name = "Hertford",
    name_col = "NAME"
  )

  # Index name (if a named list of datasets, urls, or paths is passed to index)
  get_location(
    type = "smaller",
    name = "Hertford",
    name_col = "NAME",
    index = list(
      "smaller" = dplyr::filter(nc, AREA <= 0.10),
      "larger" = dplyr::filter(nc, AREA > 0.15)
    )
  )

  # url may require passing extra parameters to `get_location_data()`
  # In this example, no location information is passed to get_location() so it warns before returning all types
  get_location(
    type = "https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Parks/FeatureServer/0",
    locationname_col = "NAME",
    locationname = "Chesapeake and Ohio Canal National Historic Park"
  )
}
}
}
