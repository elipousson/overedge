% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_location_data.R
\name{get_location_data}
\alias{get_location_data}
\alias{map_location_data}
\title{Get data for a location}
\usage{
get_location_data(
  location = NULL,
  dist = NULL,
  diag_ratio = NULL,
  unit = NULL,
  asp = NULL,
  data = NULL,
  url = NULL,
  path = NULL,
  package = NULL,
  filetype = "gpkg",
  fn = NULL,
  crop = TRUE,
  trim = FALSE,
  from_crs = NULL,
  crs = NULL,
  class = "sf",
  label = NULL,
  index = NULL,
  ...
)

map_location_data(
  location = NULL,
  dist = NULL,
  diag_ratio = NULL,
  unit = NULL,
  asp = NULL,
  data = NULL,
  url = NULL,
  path = NULL,
  package = NULL,
  filetype = "gpkg",
  fn = NULL,
  crop = TRUE,
  trim = FALSE,
  from_crs = NULL,
  crs = NULL,
  class = "list",
  label = NULL,
  load = FALSE,
  index = NULL,
  ...
)
}
\arguments{
\item{location}{sf object. If multiple areas are provided, they are unioned
into a single sf object using \link[sf:geos_combine]{sf::st_union}}

\item{dist}{buffer distance in units. Optional.}

\item{diag_ratio}{ratio of diagonal distance of area's bounding box used as
buffer distance. e.g. if the diagonal distance is 3000 meters and the
"diag_ratio = 0.1"  a 300 meter will be used. Ignored when \code{dist} is
provided.}

\item{unit}{Units for buffer. Supported options include "meter", "foot",
"kilometer", and "mile", "nautical mile" Common abbreviations (e.g. "km"
instead of "kilometer") are also supported. Distance in units is converted
to units matching GDAL units for x; defaults to "meter"}

\item{asp}{Aspect ratio of width to height as a numeric value (e.g. 0.33) or
character (e.g. "1:3"). If numeric, \code{\link[=get_asp]{get_asp()}} returns the same value
without modification.}

\item{data}{sf object including data in area. data may also be a url or file
path. data can be the name of a data object or, if package and filetype are
provided, a cached or external file.}

\item{url}{url for FeatureServer or MapServer layer to pass to
get_area_esri_data. url can be provided to data parameter}

\item{path}{path to spatial data file supported by \link[sf:st_read]{sf::read_sf}}

\item{package}{package name.}

\item{filetype}{file type supported by \link[sf:st_read]{sf::read_sf}. The file
type must be provided for extdata and cached data.}

\item{fn}{Function to apply to data before returning.}

\item{crop}{If TRUE, data cropped to location or bounding box
\link[sf:st_crop]{sf::st_crop} adjusted by the \code{dist}, \code{diag_ratio}, and \code{asp}
parameters provided. Default TRUE.}

\item{trim}{If TRUE, data trimmed to area with
\code{\link[sf]{st_intersection}}. This option is not supported for any
adjusted areas that use the \code{dist}, \code{diag_ratio}, or \code{asp} parameters.
Default \code{FALSE}.}

\item{from_crs}{coordinate reference system of the data.}

\item{crs}{coordinate reference system to return}

\item{class}{Class of object to return.}

\item{index}{A list of possible location, data, and (optionally) package
values. List must be named and include a value named package and package
must be \code{NULL}, to set package based on index. If list is not NULL and
location and/or data as character or numeric values, the location and data
are assumed to be index values for the index list. The index parameter
supports nested lists created by \link{make_location_data_list} (using only the
default key names of "location" and "data"). This feature has not be fully
tested and may result in errors or unexpected results.}

\item{...}{additional parameters passed to read_sf_path, read_sf_url, or read_sf_pkg}

\item{load}{If TRUE and class is "list", load data to local environment; defaults FALSE.}
}
\description{
Returns data for a selected area or areas with an optional buffer. If both
crop and trim are FALSE, the function uses \code{\link[sf]{st_intersects}} to
filter data to include the full geometry of anything that overlaps with the
area or bbox (if the area is not provided).
}
\details{
Working with sf lists for data and locations:

map_data_location makes it easier to work with sf lists. It supports data
as a character vector, data as an sf list when location is a single object,
location as a character vector or sf list (including lists of bbox or sfc
objects), or when both data and location are lists (such as a list created
by make_location_data_list).
}
\examples{
map_location_data(
  data = c("streets", "mta_bus_lines"),
  package = "mapbaltimore",
  location = mapbaltimore::council_districts[2,],
  label = mapbaltimore::council_districts[2,]$name,
  load = TRUE
)
}
